apply plugin: 'com.android.application'
apply plugin: 'de.felixschulze.gradle.hockeyapp'
apply plugin: 'ch.netzwerg.release'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.fsryan.exampleapp.ghstalker"
        minSdkVersion 16
        targetSdkVersion 25
        versionName "${project.version}"
        versionCode toVersionCode(versionName)
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        debug {
            storeFile rootProject.file('app' + File.separator + 'keystore' + File.separator + 'integration.keystore')
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug

            testCoverageEnabled true
            minifyEnabled false
            applicationIdSuffix ".debug"
            versionNameSuffix '.' + new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone('UTC'))

            // -PuseFabric passed in on gradle build command will enable fabric for a debug build
            // This allows us to keep from sending up fabric statistics on CI builds
            buildConfigField "boolean", "CRASHLYTICS_ENABLED", (project.hasProperty("useCrashltyics") ? "true" : "false")
            buildConfigField "boolean", "ANSWERS_ENABLED", "false"
            buildConfigField "boolean", "LEAK_CANARY_ENABLED", (project.hasProperty("useLeakCanary") ? "true" : "false")
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // fabric always enabled for release builds
            buildConfigField "boolean", "CRASHLYTICS_ENABLED", "true"
            buildConfigField "boolean", "ANSWERS_ENABLED", "true"
            buildConfigField "boolean", "LEAK_CANARY_ENABLED", "false"
            // <-- leak canary never enabled for release
        }
    }
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "com.android.support:appcompat-v7:$supportLibVersion"

    // fabric
    compile('com.crashlytics.sdk.android:answers:1.3.12@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:crashlytics:2.6.7@aar') {
        transitive = true;
    }

    // dagger
    compile "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    // auto-value
    provided "com.google.auto.value:auto-value:$autoValueVersion"
    annotationProcessor "com.google.auto.value:auto-value:$autoValueVersion"

    // rx
    compile "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    compile "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    compile "com.trello.rxlifecycle2:rxlifecycle:$rxLifecycleVersion"
    compile "com.trello.rxlifecycle2:rxlifecycle-android:$rxLifecycleVersion"
    compile "com.trello.rxlifecycle2:rxlifecycle-components:$rxLifecycleVersion"

    // butterknife
    compile "com.jakewharton:butterknife:$butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterknifeVersion"

    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"

    testCompile 'junit:junit:4.12'
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"

    androidTestCompile "org.mockito:mockito-core:$mockitoVersion"
    androidTestCompile "com.linkedin.dexmaker:dexmaker-mockito:1.5.1"
    androidTestCompile "com.android.support:support-annotations:$supportLibVersion"
    androidTestCompile("com.android.support.test.espresso:espresso-core:$espressoVersion") {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }
    androidTestCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    androidTestCompile 'com.android.support.test:runner:0.5'
}

configurations.all {
    resolutionStrategy {
        force 'com.google.code.findbugs:jsr305:3.0.1'
    }
}

hockeyapp {
    // pass -PhockeyAppToken=<your_hockeyapp_token> or put hockeyAppToken=<your_hockeyapp_token>
    // in the ~/.gradle/gradle.properties file
    apiToken = project.hasProperty("hockeyAppToken") ? project.property("hockeyAppToken") : ""
    releaseType = 2     // 0 = beta, 1 = live, 2 = alpha
    notify = 1          // notify all testers that can install this app
    status = 2          // 1 = do not allow download, 2 = make version available for download
}

release {
    // TODO: update when there is an automated release task for a release build
    dependsOn (project.hasProperty("hockeyAppToken") ? 'uploadDebugToHockeyApp' : 'assembleDebug')
    push = project.hasProperty("pushRelease")
}

// TODO: perhaps make a quick plugin to update the android version name and code with the below
def static int toVersionCode(String semVer) {
    String strippedName = semVer.replaceAll("[^.0-9]", "")
    String[] splitVersion = strippedName.split("\\.")

    int versionCode = 0
    int multiplier = 10000
    for (int i = 0; i < 3; i++) {
        versionCode += multiplier * Integer.parseInt(splitVersion[i])
        multiplier /= 100
    }

    return versionCode
}